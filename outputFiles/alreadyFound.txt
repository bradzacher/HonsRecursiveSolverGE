if (x < 2) {
 return x;
} else {
 return doMaths(recurse(doMaths(x, 5, '-')), 4, '+');
}

if (x < 2) {
 return x;
} else {
 return doMaths(recurse(doMaths(x, 6, '-')), 5, '+');
}

if (x < 2) {
 return x;
} else {
 return doMaths(recurse(doMaths(x, 2, '-')), recurse(doMaths(x, 1, '-')), '+');
}

if (x < 2) {
 return x;
} else {
 return doMaths(recurse(doMaths(x, 3, '-')), 2, '+');
}

if (x < 1) {
 return x;
} else {
 return recurse(x * 2) - x;
}

if (x < 3) {
 return 4;
} else {
 return recurse(x + 2);
}

if (x < 2) {
 return x;
} else {
 return recurse(x - 1) + 2;
}

if (x < 5) {
 return 2;
} else {
 return recurse(x - 2) + recurse(x - 1) + x;
}

if (x < 2) {
 return x;
} else {
 return recurse(x - 2) + x;
}

if (x < 5) {
 return x;
} else {
 return recurse(x - 2) * recurse(x - 2);
}

if (x < 5) {
 return x;
} else {
 return recurse(x - 5) + recurse(x - 1) + x;
}

if (x < 3) {
 return 2;
} else {
 return recurse(x - 5) * recurse(x - 1) - 1;
}

if (x > 6) {
 return x;
} else {
 return recurse(x * 3) - 6;
}

if (x < 4) {
 return x;
} else {
 return recurse(x - 2) * 3;
}

if (x < 4) {
 return x;
} else {
 return recurse(x - 2) * 3;
}

if (x < 3) {
 return 2;
} else {
 return recurse(x - 1) + recurse(x - 1) - 1;
}

if (x < 5) {
 return x;
} else {
 return recurse(x - 2) * recurse(x - 2);
}

if (x < 4) {
 return x;
} else {
 return recurse(x - 1) + recurse(x - 1) - 1;
}

if (x < 4) {
 return x;
} else {
 return recurse(x - 2) * recurse(x - 2);
}

if (x < 3) {
 return x;
} else {
 return recurse(x - 1) + recurse(x - 1) - 1;
}

if (x < 2) {
 return 1;
} else {
 return recurse(x - 3) * x;
}

if (x < 4) {
 return x;
} else {
 return recurse(x - 1) + recurse(x - 1) - 1;
}

if (x < 4) {
 return x;
} else {
 return recurse(x - 1) + recurse(x - 1) - 1;
}

if (x < 5) {
 return x;
} else {
 return recurse(x - 2) * recurse(x - 2) + recurse(x - 5);
}

if (x < 5) {
 return x;
} else {
 return recurse(x - 2) * recurse(x - 2);
}

if (x < 5) {
 return x;
} else {
 return recurse(x - 1) + x;
}

if (x < 5) {
 return x;
} else {
 return recurse(x - 2) * recurse(x - 2) + recurse(x - 5);
}

if (x > 5) {
 return x;
} else {
 return recurse(x + 5) - 6;
}

if (x < 2) {
 return x;
} else {
 return recurse(x - 3) + 2;
}

if (x < 3) {
 return 1;
} else {
 return recurse(x - 1) + 1;
}

if (x > 2) {
 return 2;
} else {
 return recurse(x + 2) - 1;
}

if (x < 2) {
 return x;
} else {
 return recurse(x - 3) + 2;
}

if (x < 3) {
 return 1;
} else {
 return recurse(x - 1) + 1;
}

if (x > 2) {
 return 2;
} else {
 return recurse(x + 9) - recurse(x + 2) + 1;
}

if (x < 2) {
 return x;
} else {
 return recurse(x - 1) + recurse(x - 2);
}

if (x < 2) {
 return x;
} else {
 return recurse(x - 3) + 2;
}

if (x < 2) {
 return x;
} else {
 return recurse(x - 1) + recurse(x - 2);
}

if (x < 2) {
 return x;
} else {
 return recurse(x - 1) * x;
}

if (x < 2) {
 return x;
} else {
 return recurse(x - 1) * x;
}

if (x < 3) {
 return x;
} else {
 return recurse(x - 1) * x;
}

if (x < 2) {
 return x;
} else {
 return recurse(x - 1) * x;
}

if (x < 2) {
 return x;
} else {
 return recurse(x - 1) * x;
}

if (x < 3) {
 return x;
} else {
 return recurse(x - 1) * x;
}

if (x < 2) {
 return 1;
} else {
 return recurse(x - 1) * x;
}

if (x < 2) {
 return x;
} else {
 return recurse(x - 1) * x;
}

if (x < 2) {
 return x;
} else {
 return recurse(x - 1) * x;
}

if (x < 2) {
 return 1;
} else {
 return recurse(x - 1) * x;
}

